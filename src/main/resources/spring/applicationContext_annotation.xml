<?xml version="1.0" encoding="GBK"?>
<!-- 
	配置文件约束：dtd  document type definition  
	           xsd xml schema definition
	ns：name space 命名空间 每一个schema的唯一标识
	作用：告知spring，生产哪些组件     
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	                       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	                       http://www.springframework.org/schema/aop
	                       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	                       http://www.springframework.org/schema/tx
	                       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	                       http://www.springframework.org/schema/context
	                       http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	                       
	<!-- 获取路径下的数据库连接文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- DataSource -->
	<!--<bean id="dbcp" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="hr"></property>
		<property name="password" value="hr"></property>
		&lt;!&ndash; 最大连接数 &ndash;&gt;
		<property name="maxActive" value="3"></property>
		&lt;!&ndash; 最小链接数 &ndash;&gt;
		<property name="minIdle" value="1"></property>
		&lt;!&ndash; 初始数量 &ndash;&gt;
		<property name="initialSize" value="1"></property>
		&lt;!&ndash; 超时时长  毫秒&ndash;&gt;
		<property name="maxWait" value="3000"></property>
	</bean>
	
	<bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="oracle.jdbc.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="user" value="hr"></property>
		<property name="password" value="hr"></property>
		&lt;!&ndash; 最大连接数 &ndash;&gt;
		<property name="maxPoolSize" value="3"></property>
		&lt;!&ndash; 最小链接数 &ndash;&gt;
		<property name="minPoolSize" value="1"></property>
		&lt;!&ndash; 初始数量 &ndash;&gt;
		<property name="initialPoolSize" value="1"></property>
		&lt;!&ndash; 超时时长  毫秒&ndash;&gt;
		<property name="checkoutTimeout" value="3000"></property>
	</bean>-->
	
	<bean id="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性  可以通过url，自动获取driverclass -->
      <property name="url" value="${jdbc.url}"/>
      <property name="username" value="${jdbc.username}"/>
      <property name="password" value="${jdbc.password}"/>
      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${jdbc.init}" />
      <property name="minIdle" value="${jdbc.min}" /> 
      <property name="maxActive" value="${jdbc.max}" />
      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${jdbc.maxWait}" />
      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />
	  <!-- 链接对象 有效验证 sql语句 -->
      <property name="validationQuery" value="SELECT 1 from dual" />
      <!-- 链接空闲时是否测试 -->
      <property name="testWhileIdle" value="true" />
      <!-- 链接检出时是否测试 -->
      <property name="testOnBorrow" value="false" />
      <!-- 链接返回池时是否测试 -->
      <property name="testOnReturn" value="false" />
  	</bean>
  	
	<!--Mybatis的 SqlSessionFactory工厂整合到Spring中 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 连接池 -->
		<property name="dataSource" ref="druid"></property>
		<!-- mapper注册 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/*-mapper.xml</value>
			</list>
		</property>
		<!-- 可选：别名 
			 定义了实体的包，则在mapper文件中使用实体时，直接写类名即可
		-->
		<property name="typeAliasesPackage" value="com.wsh.entity"></property>
	</bean>
	<!-- 
		MapperScannerConfigurer:构建DAO实现类，并将对象纳入工厂
		1.找到所有DAO接口
		2.根据提供的mapper和sqlSession,构建DAO的实现类
		3.将实现类的对象放入工厂
		4.并且每个DAO实现类对象在工厂中的ID：对应接口类名的首字母小写=userDAO
	 -->
	 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- DAO接口文件位置:找到了所有需要定制实现类的DAO接口 -->
		<!-- 在value中可以有多个DAO的接口路径，用 ‘,’隔开  -->
		<!-- <property name="basePackage" value="com.c72.dao,com.c73.dao"></property> -->
		<property name="basePackage" value="com.wsh.dao"></property>
		<!-- dao对应的mapper文件      SqlSession  -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
		<!-- 如果工厂中只有一个SqlSessionFactory,则此设置可以省略 -->
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> -->
	</bean>

	<!-- 并不是真正的事务管理器，但是，其掌握着事务的管理逻辑 -->
	<bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druid"></property>
	</bean>
	<!-- 告知spring，哪些包中的类里有注解需要解析 扫描 -->
	<!-- <context:component-scan base-package="com.c72,com.c73,a.b.c"></context:component-scan> -->
	<context:component-scan base-package="com.wsh" use-default-filters="true">
		<!-- 只是不扫描 类上有  @Controller注解的-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
 	</context:component-scan>
	<!-- 注册事务注解驱动，明确@Transactional切入的是哪个事务管理器 -->
	<tx:annotation-driven transaction-manager="tx"/>
	
</beans>


